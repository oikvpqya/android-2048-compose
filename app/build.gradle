import java.nio.file.*
import org.jetbrains.compose.desktop.application.dsl.TargetFormat

plugins {
    alias libs.plugins.android.application
    alias libs.plugins.cash.licensee
    alias libs.plugins.compose.compiler
    alias libs.plugins.jetbrains.compose
    alias libs.plugins.kotlin.multiplatform
    alias libs.plugins.kotlin.serialization
}

kotlin {
    jvmToolchain(17)
    androidTarget()
    jvm("desktop")

    wasmJs {
        moduleName = "composeApp"
        browser {
            commonWebpackConfig {
                outputFileName = "composeApp.js"
            }
        }
        binaries.executable()
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation compose.components.resources
                implementation compose.material
                implementation compose.ui
                implementation libs.jetbrains.compose.ui.backhandler
                implementation libs.jetbrains.savedstate
                implementation libs.kotlinx.coroutines.core
                implementation libs.kotlinx.serialization.json
                implementation libs.xxfast.kstore.common
            }
        }

        androidMain {
            dependencies {
                implementation libs.androidx.core.ktx
                implementation libs.androidx.activity.compose
                implementation libs.kotlinx.io.core
                implementation libs.xxfast.kstore.file
            }
        }

        desktopMain {
            dependencies {
                implementation compose.desktop.currentOs
                implementation libs.harawata.appdirs
                implementation libs.kotlinx.coroutines.swing
                implementation libs.kotlinx.io.core
                implementation libs.xxfast.kstore.file
            }
        }

        wasmJsMain {
            dependencies {
                implementation libs.xxfast.kstore.storage
            }
        }

        commonTest {
            dependencies {
                implementation libs.cash.molecule
                implementation libs.cash.turbine
                implementation libs.kotlin.test
                implementation libs.kotlinx.coroutines.test
            }
        }
    }
}

android {
    compileSdk 35
    namespace "com.alexjlockwood.twentyfortyeightcompose"

    defaultConfig {
        applicationId "com.alexjlockwood.twentyfortyeightcompose"
        minSdk 21
        targetSdk 35
        versionCode 1
        versionName "1.0.0"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.getByName("debug")
        }
    }

    buildFeatures {
        compose true
    }
}

compose {
    desktop {
        application {
            mainClass = "MainKt"

            nativeDistributions {
                targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)
                packageName = "com.alexjlockwood.twentyfortyeightcompose"
                packageVersion = "1.0.0"
            }
        }
    }

    experimental {
        web.application {}
    }

    resources {
        packageOfResClass "com.alexjlockwood.twentyfortyeight"
        String[] targets = ["android", "desktop", "wasmJs"]
        for (target in targets) {
            customDirectory("${target}Main", layout.buildDirectory.dir(Paths.get("generated", "licensee", target).toString()))
        }
    }
}

licensee {
    allow "Apache-2.0"
}

tasks.register("copyArtifactsJsonFiles") {
    String[] targets = ["android", "desktop", "wasmJs"]
    String buildDir = layout.buildDirectory.get().toString()
    for (target in targets) {
        String dir
        if (target == "android") {
            dir = "androidRelease"
        } else {
            dir = target
        }
        Path from = Paths.get(buildDir, "reports", "licensee", dir, "artifacts.json")
        Path to = Paths.get(buildDir, "generated", "licensee", target, "files", "artifacts.json")
        if (!Files.exists(to.parent)) {
            Files.createDirectories(to.parent)
        }
        Files.copy(from, to, StandardCopyOption.REPLACE_EXISTING)
    }
}
